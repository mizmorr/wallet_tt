// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mizmorr/wallet/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// WalletRepo is an autogenerated mock type for the WalletRepo type
type WalletRepo struct {
	mock.Mock
}

// Change provides a mock function with given fields: ctx, wallet
func (_m *WalletRepo) Change(ctx context.Context, wallet *model.Wallet) (uuid.UUID, error) {
	ret := _m.Called(ctx, wallet)

	if len(ret) == 0 {
		panic("no return value specified for Change")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Wallet) (uuid.UUID, error)); ok {
		return rf(ctx, wallet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Wallet) uuid.UUID); ok {
		r0 = rf(ctx, wallet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Wallet) error); ok {
		r1 = rf(ctx, wallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *WalletRepo) GetByID(ctx context.Context, id uuid.UUID) (*model.Wallet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Wallet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Wallet); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWalletRepo creates a new instance of WalletRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletRepo {
	mock := &WalletRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
